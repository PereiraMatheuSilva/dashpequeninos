datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Customer {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  phone       String
  email       String?
  address     String?
  responsavel String?
  created_at  DateTime?     @default(now())
  updated_at  DateTime?     @default(now())
  Appointment Appointment[]
}

model Services {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  value       String
  time        String?
  description String?
  created_at  DateTime?     @default(now())
  updated_at  DateTime?     @default(now())
  Appointment Appointment[]
}

model Professional {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  created_at  DateTime?     @default(now())
  updated_at  DateTime?     @default(now())
  Appointment Appointment[]
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Appointment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  date        DateTime // Data da consulta
  startTime   DateTime // Hora de início
  endTime     DateTime // Hora de término
  description String? // Descrição da consulta
  value       Float // Valor do serviço
  status      String // Status do agendamento (ex: "confirmado", "pendente")
  room        String? // Sala onde o atendimento ocorrerá

  customerId String   @db.ObjectId
  customer   Customer @relation(fields: [customerId], references: [id])

  serviceId String?   @db.ObjectId
  service   Services? @relation(fields: [serviceId], references: [id])

  professionalId String       @db.ObjectId
  professional   Professional @relation(fields: [professionalId], references: [id])

  created_at DateTime? @default(now()) // Data de criação do agendamento
  updated_at DateTime? @default(now()) @updatedAt // Data de atualização do agendamento
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}
